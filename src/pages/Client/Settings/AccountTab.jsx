import Box from '@mui/material/Box'
import Typography from '@mui/material/Typography'
import Avatar from '@mui/material/Avatar'
import Tooltip from '@mui/material/Tooltip'
import TextField from '@mui/material/TextField'
import InputAdornment from '@mui/material/InputAdornment'
import Button from '@mui/material/Button'
import CloudUploadIcon from '@mui/icons-material/CloudUpload'
import MailIcon from '@mui/icons-material/Mail'
import AccountBoxIcon from '@mui/icons-material/AccountBox'
import AssignmentIndIcon from '@mui/icons-material/AssignmentInd'

import { FIELD_REQUIRED_MESSAGE, singleFileValidator } from '~/utils/validators'
import FieldErrorAlert from '~/components/Client/Form/FieldErrorAlert'
import { useSelector, useDispatch } from 'react-redux'
import { selectCurrentUser, updateUserAPI } from '~/redux/user/userSlice'
import { useForm } from 'react-hook-form'
import { toast } from 'react-toastify'
import VisuallyHiddenInput from '~/components/Client/Form/VisuallyHiddenInput'


function AccountTab() {
  const dispatch = useDispatch()
  const currentUser = useSelector(selectCurrentUser)
  // console.log('üöÄ ~ AccountTab ~ currentUser:', currentUser)

  // Nh·ªØng th√¥ng tin c·ªßa user ƒë·ªÉ init v√†o form (key t∆∞∆°ng ·ª©ng v·ªõi register ph√≠a d∆∞·ªõi Field)
  const initialGeneralForm = {
    displayName: currentUser?.user?.displayName,
    address: currentUser?.user?.address,
    phoneNumber: currentUser?.user?.phoneNumber
  }
  // S·ª≠ d·ª•ng defaultValues ƒë·ªÉ set gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c field c·∫ßn thi·∫øt
  const { register, handleSubmit, formState: { errors } } = useForm({
    defaultValues: initialGeneralForm
  })

  const submitChangeGeneralInformation = (data) => {
    const { displayName, phoneNumber, address } = data

    // N·∫øu kh√¥ng c√≥ s·ª± thay ƒë·ªïi g√¨ v·ªÅ displayname th√¨ kh√¥ng l√†m g√¨ c·∫£
    if (
      displayName === currentUser?.user?.displayName &&
      phoneNumber === currentUser?.user?.phoneNumber &&
      address === currentUser?.user?.address) return

    // G·ªçi API...
    toast.promise(
      dispatch(updateUserAPI({ displayName, phoneNumber, address })),
      { pending: 'Updating...' }
    ).then(res => {
      if (!res.error) {
        toast.success('Thay ƒë·ªïi th√†nh c√¥ng th√¥ng tin ng∆∞·ªùi d√πng !')
      }
    })
  }

  const uploadAvatar = (e) => {
    // L·∫•y file th√¥ng qua e.target?.files[0] v√† validate n√≥ tr∆∞·ªõc khi x·ª≠ l√Ω
    //  console.log('e.target?.files[0]: ', e.target?.files[0])
    const error = singleFileValidator(e.target?.files[0])
    if (error) {
      toast.error(error)
      return
    }

    // S·ª≠ d·ª•ng FormData ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu li√™n quan t·ªõi file khi g·ªçi API
    let reqData = new FormData()
    reqData.append('avatar', e.target?.files[0])
    // C√°ch ƒë·ªÉ log ƒë∆∞·ª£c d·ªØ li·ªáu th√¥ng qua FormData
    // console.log('reqData: ', reqData)
    // for (const value of reqData.values()) {
    //   console.log('reqData Value: ', value)
    // }

    // G·ªçi API...
    toast.promise(
      dispatch(updateUserAPI(reqData)),
      { pending: 'Updating...' }
    ).then(res => {
      if (!res.error) {
        toast.success('Thay ƒë·ªïi th√†nh c√¥ng th√¥ng tin ng∆∞·ªùi d√πng !')
      }
      // L∆∞u √Ω, d√π c√≥ l·ªói ho·∫∑c th√†nh c√¥ng th√¨ c≈©ng ph·∫£i clear gi√° tr·ªã c·ªßa file input, n·∫øu kh√¥ng th√¨ kh√¥ng th·ªÉ ch·ªçn c√πng m·ªôt file li√™n t·ª•c ƒë∆∞·ª£c  
      e.target.value = ''
    })


  }

  return (
    <Box sx={{
      width: '100%',
      height: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }}>
      <Box sx={{
        maxWidth: '1200px',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        gap: 3
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <Box>
            <Avatar
              sx={{ width: 84, height: 84, mb: 1 }}
              alt="Kieuthai"
              src={currentUser?.user?.avatar}
            />
            <Tooltip title="Upload a new image to update your avatar immediately.">
              <Button
                component="label"
                variant="contained"
                size="small"
                startIcon={<CloudUploadIcon />}>
                Upload
                <VisuallyHiddenInput type="file" onChange={uploadAvatar} />
              </Button>
            </Tooltip>
          </Box>
          <Box>
            <Typography variant="h6">{currentUser?.user?.displayName}</Typography>
            <Typography sx={{ color: 'grey' }}>@{currentUser?.user?.username}</Typography>
          </Box>
        </Box>

        <form onSubmit={handleSubmit(submitChangeGeneralInformation)}>
          <Box sx={{ width: '400px', display: 'flex', flexDirection: 'column', gap: 2 }}>
            <Box>
              <TextField
                disabled
                defaultValue={currentUser?.user?.email}
                fullWidth
                label="Email c·ªßa b·∫°n"
                type="text"
                variant="filled"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <MailIcon fontSize="small" />
                    </InputAdornment>
                  )
                }}
              />
            </Box>

            <Box>
              <TextField
                disabled
                defaultValue={currentUser?.user?.displayName}
                fullWidth
                label="T√™n ng∆∞·ªùi d√πng c·ªßa b·∫°n"
                type="text"
                variant="filled"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <AccountBoxIcon fontSize="small" />
                    </InputAdornment>
                  )
                }}
              />
            </Box>

            <Box>
              <TextField
                fullWidth
                label="T√™n hi·ªÉn th·ªã c·ªßa b·∫°n"
                type="text"
                variant="outlined"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <AssignmentIndIcon fontSize="small" />
                    </InputAdornment>
                  )
                }}
                {...register('displayName', {
                  required: FIELD_REQUIRED_MESSAGE
                })}
                error={!!errors['displayName']}
              />
              <FieldErrorAlert errors={errors} fieldName={'displayName'} />
            </Box>

            <Box>
              <TextField
                fullWidth
                label="S·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n"
                type="text"
                variant="outlined"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <AssignmentIndIcon fontSize="small" />
                    </InputAdornment>
                  )
                }}
                {...register('phoneNumber', {
                  required: FIELD_REQUIRED_MESSAGE
                })}
                error={!!errors['phoneNumber']}
              />
              <FieldErrorAlert errors={errors} fieldName={'phoneNumber'} />
            </Box>
            <Box>
              <TextField
                fullWidth
                label="ƒê·ªãa ch·ªâ c·ªßa b·∫°n"
                type="text"
                variant="outlined"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <AssignmentIndIcon fontSize="small" />
                    </InputAdornment>
                  )
                }}
                {...register('address', {
                  required: FIELD_REQUIRED_MESSAGE
                })}
                error={!!errors['address']}
              />
              <FieldErrorAlert errors={errors} fieldName={'address'} />
            </Box>

            <Box>
              <Button
                className="interceptor-loading"
                type="submit"
                variant="contained"
                color="primary"
                fullWidth>
                Update
              </Button>
            </Box>
          </Box>
        </form>
      </Box>
    </Box>
  )
}

export default AccountTab
